# -*- coding: utf-8 -*-
"""tubes mosi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wZmqCXqKv3DM8oxmI4-hxv4fxVwMxvDu
"""

import math
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
import streamlit as st
from streamlit_option_menu import option_menu

st.set_page_config(layout='wide', initial_sidebar_state='expanded')



data_1 = [1080,840,900,840,540,960,900,900,1020,720,
          720,600,960,840,1020,660,1260,1200,1020,660,
          420,600,960,300,1080,1140,840,840,960,720,
          900,600,540,540,1260,1020,900,840,660,540,
          1260,1200,540,540,660,900,960,540,900,540,
          900,840,960,1260,720,600,960,600,720,960,
          300,960,840,900,720,540,660,960,600,660,
          960,1200,660,900,360,540,660,660,600,840,
          1020,1140,1080,600,1200,540,720,720,720,720,
          1140,1500,1080,420,1260,900,660,720,660,720
]

data_2 = [350,300,250,250,300,300,350,350,250,350,
        250,250,300,250,300,300,300,250,250,300,
        250,250,400,300,300,300,250,350,350,300,
        300,250,300,400,300,250,300,300,300,300,
        200,400,250,300,300,250,300,300,250,200,
        300,300,300,300,200,250,350,300,200,300,
        250,300,300,350,350,200,200,300,350,300,
        300,350,200,300,250,350,350,200,350,300,
        300,350,200,300,250,350,300,300,300,350,
        300,300,250,250,300,300,250,350,300,300,
]

number = st.number_input("Banyaknya simulasi", value=100, min_value=50, max_value=1000)
banyak_data = number

def dist1(data_1):
  # Membuat DataFrame dari data
  df1 = pd.DataFrame(data_1, columns=['Data'])

  # Membuat 4 interval yang sama besar
  bins = [300,  490,  660, 830, 1000, 1170, 1340, 1509]

  # Membuat interval dengan batas bawah pada indeks kedua menjadi 21
  custom_bins = [bins[0], 490, 660, 830, 1000, 1170, 1340, bins[-1]]

  # Mengelompokkan data ke dalam interval yang disesuaikan
  df1['Interval'] = pd.cut(df1['Data'], bins=custom_bins, include_lowest=True, right=False, labels=['300-489', '490-659', '660-829', '830-999', '1000-1169', '1170-1339', '1340-1509'])


  # Membuat tabel frekuensi
  frequency_table = df1['Interval'].value_counts().sort_index()

  # Mengatur tabel frekuensi sebagai DataFrame
  df1 = frequency_table.reset_index()
  df1.columns = ['Interval', 'Frequency']

  nilai_tengah = []
  print(len(df1['Interval'][0]))
  for i in df1['Interval']:
    if(len(i) == 7):
      nt = (int(i[0:3]) + int(i[4:7])) / 2
      nilai_tengah.append(nt)
    else:
      nt = (int(i[0:4]) + int(i[5:9])) / 2
      nilai_tengah.append(nt)

  print(nilai_tengah)

  df1["Nilai Tengah (X)"] = nilai_tengah
  df1["X x f"] = df1['Frequency'] * df1['Nilai Tengah (X)']
  mean = df1['X x f'].sum() / df1['Frequency'].sum()
  df1['(X - mean)^2'] = (df1['Nilai Tengah (X)'] - mean)**2
  df1['f(X - mean)'] = df1['Frequency'] * df1['(X - mean)^2']
  st.dataframe(df1)

  mean1 = df1['X x f'].sum() / df1['Frequency'].sum()
  varians1 = df1['f(X - mean)'].sum() / (df1['Frequency'].sum() - 1)
  std_dev1 = math.sqrt(varians1)

  
  with st.expander("Statistik"):
    st.write("N     :",len(data_1) )
    st.write("Max   :",max(data_1) )
    st.write("Min   :",min(data_1) )
    st.write("Range :", max(data_1)-min(data_1))
    st.write("Banyak Kelas  :", math.floor(1 + 3.3 * math.log10(len(data_1))))
    st.write("Panjang Kelas :", (max(data_1)-min(data_1))/math.floor(1 + 3.3 * math.log10(len(data_1))) )
    st.write("Rata-rata  :", mean1)
    st.write("Varians    :", varians1)
    st.write("Standar Deviasi :", std_dev1)

  with st.expander("Histogram"):
    fig, ax = plt.subplots()
    ax.bar(df1['Interval'], df1['Frequency'])
    plt.xticks(rotation=20)
    ax.set_title('Histogram waktu antar kedatangan pelanggan')
    ax.set_xlabel('Interval')
    ax.set_ylabel('Frekuensi')

    # Menampilkan plot
    st.pyplot(fig)

def stat1(data_1):
  # Membuat DataFrame dari data
  df1 = pd.DataFrame(data_1, columns=['Data'])

  # Membuat 4 interval yang sama besar
  bins = [300,  490,  660, 830, 1000, 1170, 1340, 1509]

  # Membuat interval dengan batas bawah pada indeks kedua menjadi 21
  custom_bins = [bins[0], 490, 660, 830, 1000, 1170, 1340, bins[-1]]

  # Mengelompokkan data ke dalam interval yang disesuaikan
  df1['Interval'] = pd.cut(df1['Data'], bins=custom_bins, include_lowest=True, right=False, labels=['300-489', '490-659', '660-829', '830-999', '1000-1169', '1170-1339', '1340-1509'])


  # Membuat tabel frekuensi
  frequency_table = df1['Interval'].value_counts().sort_index()

  # Mengatur tabel frekuensi sebagai DataFrame
  df1 = frequency_table.reset_index()
  df1.columns = ['Interval', 'Frequency']

  nilai_tengah = []
  print(len(df1['Interval'][0]))
  for i in df1['Interval']:
    if(len(i) == 7):
      nt = (int(i[0:3]) + int(i[4:7])) / 2
      nilai_tengah.append(nt)
    else:
      nt = (int(i[0:4]) + int(i[5:9])) / 2
      nilai_tengah.append(nt)


  df1["Nilai Tengah (X)"] = nilai_tengah
  df1["X x f"] = df1['Frequency'] * df1['Nilai Tengah (X)']
  mean = df1['X x f'].sum() / df1['Frequency'].sum()
  df1['(X - mean)^2'] = (df1['Nilai Tengah (X)'] - mean)**2
  df1['f(X - mean)'] = df1['Frequency'] * df1['(X - mean)^2']

  mean1 = df1['X x f'].sum() / df1['Frequency'].sum()
  varians1 = df1['f(X - mean)'].sum() / (df1['Frequency'].sum() - 1)
  std_dev1 = math.sqrt(varians1)
  return mean1, std_dev1

  

def dist2(data_2):
  df2 = pd.DataFrame(data_2, columns=['Data'])
  df2 = df2['Data'].value_counts()
  df2 = df2.sort_index()
  df2 = df2.reset_index()
  df2.columns = ['data', 'Frequency']

  df2['X * f'] = df2['data'] * df2['Frequency']
  mean2 = df2['X * f'].sum() / df2['Frequency'].sum()
  df2['(X - mean)^2'] = (df2['data'] - mean2)**2

  varians2 = df2['(X - mean)^2'].sum() / (df2['Frequency'].sum() - 1)
  std_dev2 = math.sqrt(varians2)
  print(std_dev2)

  df2

  with st.expander("Statistik"):
    st.write("N     :",len(data_2) )
    st.write("Max   :",max(data_2) )
    st.write("Min   :",min(data_2) )
    st.write("Range :", max(data_2)-min(data_2))
    st.write("Banyak Kelas  :", math.floor(1 + 3.3 * math.log10(len(data_2))))
    st.write("Panjang Kelas :", (max(data_2)-min(data_2))/math.floor(1 + 3.3 * math.log10(len(data_2))) )
    st.write("Rata-rata  :", mean2)
    st.write("Varians    :", varians2)
    st.write("Standar Deviasi :", std_dev2)

  with st.expander("Histogram"):
    fig, ax = plt.subplots(figsize = (12,8))
    
    ax.bar(df2['data'], df2['Frequency'], width=30)
    
    ax.set_title('Histogram waktu pencucian rambut')
    ax.set_xlabel('Data')
    ax.set_ylabel('Frekuensi')

    # Menampilkan plot
    st.pyplot(fig)
  
def stat2(data_2):
  df2 = pd.DataFrame(data_2, columns=['Data'])
  df2 = df2['Data'].value_counts()
  df2 = df2.sort_index()
  df2 = df2.reset_index()
  df2.columns = ['data', 'Frequency']

  df2['X * f'] = df2['data'] * df2['Frequency']
  mean2 = df2['X * f'].sum() / df2['Frequency'].sum()
  df2['(X - mean)^2'] = (df2['data'] - mean2)**2

  varians2 = df2['(X - mean)^2'].sum() / (df2['Frequency'].sum() - 1)
  std_dev2 = math.sqrt(varians2)
  
  return mean2, std_dev2




def rng1(ambil):
  z0_1 = 10122010
  a = 89
  m = 779874

  rng1 = {
      'Z0' : [],
      'Zi' : [],
      'Ui' : []
  }

  
  for i in range(banyak_data):
    zi = (a * z0_1) % m
    ui = zi / m

    rng1['Z0'].append(z0_1)
    rng1['Zi'].append(zi)
    rng1['Ui'].append(f"{ui:.5f}")
    z0_1 = zi
    df_rng1 = pd.DataFrame(rng1)
    # st.write(df_rng1.duplicated())
  if(ambil):
    df_rng1
  else:
    return df_rng1


def rng2(ambil):
  z0_2 = 10122022
  a = 89
  m = 779874

  rng2 = {
      'Z0' : [],
      'Zi' : [],
      'Ui' : []
  }

  for i in range(banyak_data):
    zi = (a * z0_2) % m
    ui = zi / m

    rng2['Z0'].append(z0_2)
    rng2['Zi'].append(zi)
    rng2['Ui'].append(f"{ui:.5f}")
    z0_2 = zi
    df_rng2 = pd.DataFrame(rng2)

  if(ambil):
    df_rng2
  else:
    return df_rng2

def dn1(ambil):
  mean1, std_dev1 = stat1(data_1)
  df_rng1 = rng1(0)
  dn1 = {
      'Zi' : df_rng1['Zi'],
      'Ui' : df_rng1['Ui']
  }
  df_dn1 = pd.DataFrame(dn1)

  df_dn1['Ui + 1'] = df_dn1['Ui'].shift(-1)
  df_dn1 = df_dn1.dropna(subset='Ui + 1')
  v1 = []
  for i in df_dn1['Ui']:
    i = float(i)
    x = (-2 * math.log(i))**(1/2)
    v1.append(f"{x:.3f}")
  df_dn1['(-2*ln(Ui))^1/2'] = v1

  v11 = []
  for i in df_dn1['Ui + 1']:

    i = float(i)
    x = math.sin(2 * 3.14 * i)
    v11.append(f"{x:.3f}")
  df_dn1['sin(2*phi*ui+1)'] = v11

  #Z
  df_dn1['(-2*ln(Ui))^1/2'] = df_dn1['(-2*ln(Ui))^1/2'].astype(float)
  df_dn1['sin(2*phi*ui+1)'] = df_dn1['sin(2*phi*ui+1)'].astype(float)
  df_dn1['Z'] = df_dn1['(-2*ln(Ui))^1/2'] * df_dn1['sin(2*phi*ui+1)']

  #X
  df_dn1['X'] = round(mean1 + (std_dev1*df_dn1['Z']),0)

  if(ambil):
    return df_dn1
  else:
    df_dn1



def dn2(ambil):
  mean2, std_dev2 = stat2(data_2)
  df_rng2 = rng2(0)
  dn2 = {
      'Zi' : df_rng2['Zi'],
      'Ui' : df_rng2['Ui']
  }
  df_dn2 = pd.DataFrame(dn2)

  df_dn2['Ui + 1'] = df_dn2['Ui'].shift(-1)
  df_dn2 = df_dn2.dropna(subset='Ui + 1')

  df_dn2['Ui'] = df_dn2['Ui'].astype(float)
  df_dn2['Ui + 1'] = df_dn2['Ui + 1'].astype(float)

  v2 = []
  for i in df_dn2['Ui']:
    i = float(i)
    x = (-2 * np.log(i))**(1/2)
    v2.append(f"{x:.3f}")
  df_dn2['(-2*ln(Ui))^1/2'] = v2

  v22 = []
  for i in df_dn2['Ui + 1']:
    # i = float(i)
    x = math.sin(2 * 3.14 * i)
    v22.append(f"{x:.3f}")
  df_dn2['sin(2*phi*ui+1)'] = v22

  #Z
  df_dn2['(-2*ln(Ui))^1/2'] = df_dn2['(-2*ln(Ui))^1/2'].astype(float)
  df_dn2['sin(2*phi*ui+1)'] = df_dn2['sin(2*phi*ui+1)'].astype(float)
  df_dn2['Z'] = df_dn2['(-2*ln(Ui))^1/2'] * df_dn2['sin(2*phi*ui+1)']

  #X
  df_dn2['X'] = round(mean2 + (std_dev2*df_dn2['Z']),0)

  if(ambil):
    return df_dn2
  else:
    df_dn2


def simulasi():
  df_dn1, df_dn2 = dn1(1), dn2(1)
  # Simulasi
  sim = {
      'A' : df_dn1['Ui'],
      'B' : df_dn2['Ui']
  }
  simulasi = pd.DataFrame(sim)

  simulasi['C'] = df_dn1['X']

  d = 0
  D = []
  for i in simulasi['C']:
    d += i
    D.append(d)

  simulasi['D'] = D

  simulasi['E'] = df_dn2['X']

  simulasi['F'] = simulasi['D'] + simulasi['E']

  simulasi['G'] = 900

  simulasi['H'] = simulasi['F'] + simulasi['G']

  I = [0]
  for i in range(banyak_data-2):
    if(simulasi.loc[i, 'F'] > simulasi.loc[i+1, 'D']):
      x = simulasi.loc[i, 'F'] - simulasi.loc[i+1, 'D']
      I.append(x)
    else:
      I.append(0)
  simulasi['I'] = I

  J = [0]
  for i in range(banyak_data-2):
    if(simulasi.loc[i, 'H'] > simulasi.loc[i+1, 'F']):
      x = simulasi.loc[i, 'H'] - simulasi.loc[i+1, 'F']
      J.append(x)
    else:
      J.append(0)
  simulasi['J'] = J

  K = [simulasi['D'][0]]
  for i in range(banyak_data-2):
    if(simulasi.loc[i+1, 'D'] > simulasi.loc[i, 'F']):
      x = simulasi.loc[i+1, 'D'] - simulasi.loc[i, 'F']
      K.append(x)
    else:
      K.append(0)
  simulasi['K'] = K

  L = [simulasi['F'][0]]
  for i in range(banyak_data-2):
    if(simulasi.loc[i+1, 'F'] > simulasi.loc[i, 'H']):
      x = simulasi.loc[i+1, 'F'] - simulasi.loc[i, 'H']
      L.append(x)
    else:
      L.append(0)
  simulasi['L'] = L

  simulasi['M'] = simulasi['I'] + simulasi['E'] + simulasi['J'] + simulasi['G']

  st.markdown('### DASHBOARD')
  col1, col2 = st.columns(2)
  col1.metric(label="Rata-rata waktu antar kedatangan pelanggan (Menit)", value=round((simulasi['C'].sum()/len(simulasi['C'])/60)))
  col2.metric(label="Rata-rata waktu pelayanan (menit)", value=round((simulasi['M'].sum()/len(simulasi['M'])/60)))

  st.markdown("#### Grafik")
  c1, c2 = st.columns(2)
  with c1:
    pelayan = ['Pencuci Rambut', "Pemotong Rambut"]
    mean_pelayan = [round(simulasi['K'].mean()), round(simulasi['L'].mean())]
    # Membuat diagram batang menggunakan matplotlib
    fig, ax = plt.subplots()
    ax.bar(pelayan, mean_pelayan)
    ax.set_xlabel('Pelayan')
    ax.set_ylabel('Waktu (detik)')
    ax.set_title('Perbandingan Rata-rata Waktu Menganggur Pelayan')

    # Menampilkan diagram batang di Streamlit
    st.pyplot(fig)
  with c2:
    # Membuat diagram garis menggunakan matplotlib
    pelanggan = np.arange(0, len(simulasi['C']))
    fig, ax = plt.subplots()
    ax.plot(pelanggan, simulasi['C'], label='Waktu antar kedatangan')
    ax.set_xlabel('Pelanggan')
    ax.set_ylabel('Waktu (detik)')
    ax.set_title('Diagram Garis Waktu Antar Kedatangan Pelanggan')
    ax.legend()

    # Menampilkan diagram garis di Streamlit
    st.pyplot(fig)  

  with st.expander("Tabel Simulasi"):
    st.write("A = Waktu antar kedatangan pelangan (Variabel acak)")
    st.write("B = Waktu proses pencucian rambut (Variabel acak)")
    st.write("C = Waktu antar kedatangan pelangan (detik)")
    st.write("D = Kumulatif kedatangan pelangan (detik)")
    st.write("E = Waktu proses pencucian rambut (detik)")
    st.write("F = Waktu selesai pencucian rambut (detik)")
    st.write("G = Waktu proses pemotongan rambut (detik)")
    st.write("H = Waktu selesai dilayani (detik)")
    st.write("I = Waktu menunggu pelanggan untuk cuci rambut (detik)")
    st.write("J = Waktu menunggu pelanggan untuk potong rambut (detik)")
    st.write("K = Waktu menganggur pencuci rambut (detik)")
    st.write("L = Waktu menganggur pemotong rambut (detik)")
    simulasi

with st.sidebar :
    selected = option_menu('Tugas Besar MOSI',['Dashboard', "Distribusi Normal", "RNG", "Tabel Distribusi Frekuensi"],
    # icons =["Home", "statistik"],
    menu_icon="cast",
    default_index=0)

if(selected == "Dashboard"):
  # simulasi(df_dn1, df_dn2)
  simulasi()

elif(selected == "Tabel Distribusi Frekuensi"):
  st.header(f"Tabel Distribusi Frekuensi")
  
  tab1,tab2 = st.tabs(["Data 1", "Data 2"])
  with tab1:
    dist1(data_1)
  with tab2:
    dist2(data_2)

elif(selected == "RNG"):
  st.header(f"Random Number Generator")
  st.subheader("Multiplicative")
  tab1,tab2 = st.tabs(["RNG 1", "RNG 2"])

  with tab1:
    rng1(1)
    
  with tab2:
    rng2(1)

elif(selected == "Distribusi Normal"):
  st.header(f"Pola Duga Distrbusi")
  st.subheader("Distribusi Normal")
  tab1,tab2 = st.tabs(["Data 1", "Data 2"])

  with tab1:
    dn1(0)
  with tab2:
    dn2(0)